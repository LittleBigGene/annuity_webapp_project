import unittest
import pandas as pd
from number_crunching_modules import NumberCruncher
from discount_curve_module import DiscountCurveProvider

class NumberCruncher_test(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.qx = [0.001783, 0.000446, 0.000306, 0.000254, 0.000193, 0.000186, 0.000184, 0.000177, 0.000159, 0.000143, 0.000126, 0.000123, 0.000147, 0.000188, 0.000236, 0.000282, 0.000325, 0.000364, 0.000399, 0.00043, 0.000459, 0.000492, 0.000526, 0.000569, 0.000616, 0.000669, 0.000728, 0.000764, 0.000789, 0.000808, 0.000824, 0.000834, 0.000838, 0.000828, 0.000808, 0.000789, 0.000783, 0.0008, 0.000837, 0.000889, 0.000955, 0.001029, 0.00111, 0.001188, 0.001268, 0.001355, 0.001464, 0.001615, 0.001808, 0.002032, 0.002285, 0.002557, 0.002828, 0.003088, 0.003345, 0.003616, 0.003922, 0.004272, 0.004681, 0.005146, 0.005662, 0.006237, 0.006854, 0.00751, 0.00822, 0.009007, 0.009497, 0.010085, 0.010787, 0.011625, 0.012619, 0.013798, 0.015195, 0.016834, 0.018733, 0.020905, 0.023367, 0.026155, 0.029306, 0.032858, 0.036927, 0.041703, 0.046957, 0.052713, 0.059148, 0.066505, 0.075015, 0.084823, 0.095987, 0.108482, 0.122214, 0.136799, 0.152409, 0.169078, 0.186882, 0.205844, 0.219247, 0.238612, 0.258341, 0.278219, 0.298452, 0.32361, 0.344191, 0.364633, 0.384783, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]
        cls.dc = [0.984281031920234, 0.96880914979796, 0.954410391019473, 0.93969520616569, 0.92446461594948, 0.908688393231543, 0.892630385204329, 0.876121456526178, 0.859338131766428, 0.842377195145383, 0.825925809660083, 0.809398122031756, 0.79280633625568, 0.776162495319867, 0.75947847091866, 0.744208213225815, 0.729045444085094, 0.713993415771664, 0.699055269651177, 0.684234036436185, 0.671184739082859, 0.658351967846467, 0.645732444188018, 0.633322933973429, 0.621120246961875, 0.609121236298527, 0.597322798011666, 0.585721870514174, 0.574315434109375, 0.563100510501218, 0.552104585903129, 0.541323383819959, 0.53075271126566, 0.520388457132568, 0.510226590592522, 0.500263159529208, 0.490494289001123, 0.48091617973454, 0.471525106645909, 0.462317417393116, 0.453289530955022, 0.444437936238747, 0.435759190714148, 0.427249919074966, 0.418906811926108, 0.410726624496576, 0.402706175377516, 0.394842345284919, 0.387132075846482, 0.379572368412155, 0.372160282887915, 0.36489293659232, 0.357767503135381, 0.35078121131934, 0.343931344060899, 0.337215237334505, 0.330630279136267, 0.324173908468104, 0.317843614341732, 0.311636934802097, 0.305551455969885, 0.299584811102718, 0.293734679674696, 0.287998786473903, 0.282374900717541, 0.276860835184339, 0.271454445363912, 0.266153628622722, 0.26095632338633, 0.255860508337616, 0.250864201630657, 0.245965460119954, 0.241162378604709, 0.236453089087864, 0.231835760049606, 0.227308595735056, 0.222869835455873, 0.218517752905495, 0.214250655487747, 0.210066883658562, 0.205964810280563, 0.201942839990234, 0.197999408577465, 0.194132982377201, 0.190342057672974, 0.186625160112086, 0.182980844132204, 0.179407692399166, 0.175904315255745, 0.172469350181199, 0.169101461261358, 0.165799338669067, 0.162561698154774, 0.159387280547061, 0.156274851262936, 0.153223199827679, 0.150231139404073, 0.14729750633082, 0.144421159669975, 0.141600980763218, 0.138835872796788, 0.136124760374914, 0.133466589101577, 0.130860325170438, 0.128304954962774, 0.125799484653262, 0.123342939823469, 0.12093436508288, 0.118572823697337, 0.116257397224721, 0.113987185157757, 0.111761304573796, 0.109578889791427, 0.107439092033801, 0.105341079098527, 0.103284035034017, 0.101267159822149, 0.0992896690671222, 0.0973507936903986, 0.0954497796315925]
        cls.cruncher = NumberCruncher(50,'m', 1000, cls.qx, cls.dc)

    def test_actuarial_pv(self):
        self.assertAlmostEqual(24386.2403794189, self.cruncher.actuarial_PV())

        self.cruncher.update_age(60)

        self.assertAlmostEqual(19421.6723720988, self.cruncher.actuarial_PV())

        self.cruncher.update_age(0)
        
        self.assertAlmostEqual(40512.072024397, self.cruncher.actuarial_PV())

    def test_life_expectation(self):
        self.cruncher.update_age(50)

        self.assertAlmostEqual(84.1054262091781, self.cruncher.life_expectancy(), 8)

        self.cruncher.update_age(60)

        self.assertAlmostEqual(85.1599362402086, self.cruncher.life_expectancy(), 8)

if __name__ == '__main__':
    unittest.main()